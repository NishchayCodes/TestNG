<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="2" total="13" passed="10" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-05-12T16:54:38 IST" name="Loan Department" finished-at="2024-05-12T16:54:38 IST" duration-ms="59">
    <groups>
      <group name="Smoke">
        <method signature="day1.Demo()[pri:0, instance:test1.day1@76508ed1]" name="Demo" class="test1.day1"/>
        <method signature="day2.ploan()[pri:0, instance:test1.day2@3c407114]" name="ploan" class="test1.day2"/>
        <method signature="day4.ApiLoginHomeLoan()[pri:0, instance:test1.day4@35ef1869]" name="ApiLoginHomeLoan" class="test1.day4"/>
        <method signature="day3.WebSigninCarLoan()[pri:0, instance:test1.day3@7b9a4292]" name="WebSigninCarLoan" class="test1.day3"/>
      </group> <!-- Smoke -->
    </groups>
    <test started-at="2024-05-12T16:54:38 IST" name="Car Loan" finished-at="2024-05-12T16:54:38 IST" duration-ms="59">
      <class name="test1.day2">
        <test-method is-config="true" signature="afsuite()[pri:0, instance:test1.day2@3c407114]" started-at="2024-05-12T16:54:38 IST" name="afsuite" finished-at="2024-05-12T16:54:38 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afsuite -->
      </class> <!-- test1.day2 -->
      <class name="test1.day3">
        <test-method is-config="true" signature="bfsuite()[pri:0, instance:test1.day3@7b9a4292]" started-at="2024-05-12T16:54:38 IST" name="bfsuite" finished-at="2024-05-12T16:54:38 IST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bfsuite -->
        <test-method signature="WebLoginCarLoan(java.lang.String)[pri:0, instance:test1.day3@7b9a4292]" started-at="2024-05-12T16:54:38 IST" name="WebLoginCarLoan" finished-at="2024-05-12T16:54:38 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CarLoan.com]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- WebLoginCarLoan -->
        <test-method signature="WebSigninCarLoan()[pri:0, instance:test1.day3@7b9a4292]" started-at="2024-05-12T16:54:38 IST" name="WebSigninCarLoan" finished-at="2024-05-12T16:54:38 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- WebSigninCarLoan -->
        <test-method signature="WebSignoutCarLoan(java.lang.String,java.lang.String)[pri:0, instance:test1.day3@7b9a4292]" started-at="2024-05-12T16:54:38 IST" name="WebSignoutCarLoan" data-provider="getData" finished-at="2024-05-12T16:54:38 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[firstusername]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[firstpwd]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- WebSignoutCarLoan -->
        <test-method signature="WebSignoutCarLoan(java.lang.String,java.lang.String)[pri:0, instance:test1.day3@7b9a4292]" started-at="2024-05-12T16:54:38 IST" name="WebSignoutCarLoan" data-provider="getData" finished-at="2024-05-12T16:54:38 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[secondusername]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[secondpwd]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- WebSignoutCarLoan -->
        <test-method signature="WebSignoutCarLoan(java.lang.String,java.lang.String)[pri:0, instance:test1.day3@7b9a4292]" started-at="2024-05-12T16:54:38 IST" name="WebSignoutCarLoan" data-provider="getData" finished-at="2024-05-12T16:54:38 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[thirdusername]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[thirdpwd]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- WebSignoutCarLoan -->
        <test-method signature="ApiLoginCarLoan()[pri:0, instance:test1.day3@7b9a4292]" started-at="2024-05-12T16:54:38 IST" name="ApiLoginCarLoan" finished-at="2024-05-12T16:54:38 IST" depends-on-methods="test1.day3.WebSignoutCarLoan" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ApiLoginCarLoan -->
      </class> <!-- test1.day3 -->
    </test> <!-- Car Loan -->
    <test started-at="2024-05-12T16:54:38 IST" name="Personal Loan" finished-at="2024-05-12T16:54:38 IST" duration-ms="56">
      <class name="test1.day2">
        <test-method is-config="true" signature="prerequisite()[pri:0, instance:test1.day2@3c407114]" started-at="2024-05-12T16:54:38 IST" name="prerequisite" finished-at="2024-05-12T16:54:38 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prerequisite -->
        <test-method signature="ploan()[pri:0, instance:test1.day2@3c407114]" started-at="2024-05-12T16:54:38 IST" name="ploan" finished-at="2024-05-12T16:54:38 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ploan -->
      </class> <!-- test1.day2 -->
      <class name="test1.day1">
        <test-method signature="Demo()[pri:0, instance:test1.day1@76508ed1]" started-at="2024-05-12T16:54:38 IST" name="Demo" finished-at="2024-05-12T16:54:38 IST" duration-ms="9" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at test1.day1.Demo(day1.java:19)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1583)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Demo -->
        <test-method is-config="true" signature="lastExecution()[pri:0, instance:test1.day1@76508ed1]" started-at="2024-05-12T16:54:38 IST" name="lastExecution" finished-at="2024-05-12T16:54:38 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lastExecution -->
      </class> <!-- test1.day1 -->
      <class name="test1.day4">
        <test-method is-config="true" signature="bfclass()[pri:0, instance:test1.day4@35ef1869]" started-at="2024-05-12T16:54:38 IST" name="bfclass" finished-at="2024-05-12T16:54:38 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bfclass -->
        <test-method is-config="true" signature="beforeEvery()[pri:0, instance:test1.day4@35ef1869]" started-at="2024-05-12T16:54:38 IST" name="beforeEvery" finished-at="2024-05-12T16:54:38 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeEvery -->
        <test-method signature="ApiLoginHomeLoan()[pri:0, instance:test1.day4@35ef1869]" started-at="2024-05-12T16:54:38 IST" name="ApiLoginHomeLoan" finished-at="2024-05-12T16:54:38 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ApiLoginHomeLoan -->
        <test-method is-config="true" signature="AfterEvery()[pri:0, instance:test1.day4@35ef1869]" started-at="2024-05-12T16:54:38 IST" name="AfterEvery" finished-at="2024-05-12T16:54:38 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterEvery -->
        <test-method signature="MobileLoginHomeLoan()[pri:0, instance:test1.day4@35ef1869]" started-at="2024-05-12T16:54:38 IST" name="MobileLoginHomeLoan" finished-at="2024-05-12T16:54:38 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MobileLoginHomeLoan -->
        <test-method is-config="true" signature="beforeEvery()[pri:0, instance:test1.day4@35ef1869]" started-at="2024-05-12T16:54:38 IST" name="beforeEvery" finished-at="2024-05-12T16:54:38 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeEvery -->
        <test-method is-config="true" signature="AfterEvery()[pri:0, instance:test1.day4@35ef1869]" started-at="2024-05-12T16:54:38 IST" name="AfterEvery" finished-at="2024-05-12T16:54:38 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterEvery -->
        <test-method is-config="true" signature="beforeEvery()[pri:0, instance:test1.day4@35ef1869]" started-at="2024-05-12T16:54:38 IST" name="beforeEvery" finished-at="2024-05-12T16:54:38 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeEvery -->
        <test-method signature="WebLoginHomeLoan(java.lang.String,java.lang.String)[pri:0, instance:test1.day4@35ef1869]" started-at="2024-05-12T16:54:38 IST" name="WebLoginHomeLoan" finished-at="2024-05-12T16:54:38 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[PersonalLoan.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- WebLoginHomeLoan -->
        <test-method is-config="true" signature="AfterEvery()[pri:0, instance:test1.day4@35ef1869]" started-at="2024-05-12T16:54:38 IST" name="AfterEvery" finished-at="2024-05-12T16:54:38 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterEvery -->
        <test-method is-config="true" signature="afclass()[pri:0, instance:test1.day4@35ef1869]" started-at="2024-05-12T16:54:38 IST" name="afclass" finished-at="2024-05-12T16:54:38 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afclass -->
      </class> <!-- test1.day4 -->
    </test> <!-- Personal Loan -->
  </suite> <!-- Loan Department -->
</testng-results>
